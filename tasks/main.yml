---

- name: establish pre-requisites
  become: true
  when: "(ansible_system | lower) != 'windows'"
  package:
    name: unzip
    state: present
  tags: install

- name: check terraform existence
  command: "terraform --version"
  register: v
  changed_when: false
  failed_when: false
  tags: install

- name: establish explicit version
  when:
    - terraform_version is defined
    - v['stdout'] is not defined or terraform_version not in v.stdout
  vars:
    terraform_architecture: "{{ (ansible_architecture == 'x86_64')
      | ternary(((ansible_userspace_bits | int) == 64)
        | ternary('amd64','386'),
        'arm') | default('amd64') }}"
  become: true
  unarchive:
    src: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_{{ ansible_system | lower }}_{{ terraform_architecture }}.zip  # noqa 204
    dest: "{{ terraform_binary_dir_path }}"
    remote_src: true
    creates: "{{ terraform_binary_dir_path }}/terraform"
  tags: install

# https://www.terraform.io/downloads
- name: install package
  when: not terraform_version is defined
  include_tasks: "{{ ansible_os_family }}.yml"
  tags: install

- name: establish plugins
  when: terraform_plugin_urls  | length > 0
  tags: install
  block:
    - name: establish plugins directory
      loop:
        - .terraform.d/
        - .terraform.d/plugins/
      file:
        path: "{{ ansible_env.HOME }}/{{ item }}"
        state: directory
        owner: "{{ ansible_env.USER | default(ansible_user_id) }}"
        group: "{{ ansible_env.USER | default(ansible_user_id) }}"
        mode: "u=rwx,go=rx"

    - name: establish plugins
      loop: "{{ terraform_plugin_urls }}"
      unarchive:
        src: "{{ item }}"
        dest: "{{ ansible_env.HOME }}/.terraform.d/plugins/"
        remote_src: true
